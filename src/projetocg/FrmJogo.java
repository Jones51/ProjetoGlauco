/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetocg;

import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Random;

/**
 *
 * @author Jones
 */
public class FrmJogo
        extends javax.swing.JFrame
        implements Runnable {

    private boolean left;
    private boolean right;
    private boolean fimJogo;
    private boolean keyRestart;
    private int Score = 0; 
    private int QtdBlocos = 0;
    private int Qtdlista = 0;
    private int Qtdlixo = 0;
    
    public FrmJogo() {
        initComponents();
        createBufferStrategy(2);
        Thread t = new Thread(this);
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            left = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            right = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_R) {
            keyRestart = true;
        }

    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            left = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            right = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_R) {
            keyRestart = false;
        }
    }//GEN-LAST:event_formKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmJogo().setVisible(true);
            }
        });
    }

    @Override
    public void run() {
        Graphics g;

        ArrayList<Base> lista = new ArrayList();
        ArrayList<Base> lixo = new ArrayList();

        Raquete player = new Raquete();
        player.setLargura(80);
        player.setAltura(30);
        player.setIncrY(0);
        player.setIncrX(0);
        player.setX(300);
        player.setY(getHeight() - player.getAltura());
        lista.add(player);

        Random r = new Random();
        
        
        //Criada bola
        for (int i = 0; i < 1; i++) {
            Bola b = new Bola();
            b.setX(150);
            b.setY(150);
            int red = r.nextInt(255);
            int green = r.nextInt(255);
            int blue = r.nextInt(255);
            b.setCor(new Color(red, green, blue));
            lista.add(b);
        }
        
      
        //Criando os blocos 
        for (int i = 0; i < 3; i++) {
            for(int j = 0; j < 4; j++){
                Bloco c = new Bloco();
                c.setLargura(75);
                c.setAltura(10);
                c.setX(40 + (j*90)); //move horizontal
                c.setY(50 + (i*20)); // move vertical
                c.setIncrY(0);
                c.setIncrX(0);
                int red = r.nextInt(255);
                c.setCor(new Color(red));
                lista.add(c);
            }
        }
        
         while (true) {
            g = getBufferStrategy().getDrawGraphics();
            //Limpa a tela
            g.setColor(Color.WHITE);
            g.fillRect(0, 0, getWidth(), getHeight());
            //Desenha um oval

            
            
            //Colisao Player com Bola
            for (Base b : lista) {
                if (player.colisao(b)) {
                    b.setIncrY(-1); //MENOS É PARA CIMA!!!
                }
                
                //Colisao Bola com Blocos 
                if(b.bola == 1){ //esse aqui é a bola
                    for (Base c : lista){
                        if(b.colisao(c) && c.bloco == 1 ){
                            lixo.add(c);
                            b.setIncrY(1);
                            Score = Score + 1;
                        }
                    }
                }
            }
           
            for (Base b : lista) {
                b.mover();
            }

            
            for (Base b : lista) {
                b.desenhar(g);
            }
            
            long tempo = System.currentTimeMillis();
            
            
            for (Base b : lista) {
                Colisao aux = b.trataColisao(getWidth(), getHeight());
                if (aux == Colisao.DOWN && b.bola == 1) {
                    lixo.add(b);
                }
            }
            
            //Adicionando bola no lixo
            
            //SCOREEEEEEEEEE
            g.drawString("Score: "+ Score + ".", 50, 40);
            

            
            //Finalizar jogo se bola sair de cena
            for(Base b : lixo){
                if(b.bola == 1){
                    g.setColor(Color.BLACK);
                    g.drawString("FIM de JOGO - Tecle R para Reiniciar", 100, 200);
                    fimJogo = true;
                }
            }
            
            //Finalizar jogo pelo score
            if(Score == 12){
                g.setColor(Color.BLACK);
                g.drawString("VOCE VENCEU! - Tecle R para Reiniciar", 100, 200);
                fimJogo = true;
            }
            
            lista.removeAll(lixo);
            lixo.clear();
            
          
            //REINICIANDO O JOGO
            if (fimJogo && keyRestart) {
                Qtdlista = 0;
                Qtdlixo = 0;
                Score = 0;
                
                player.setX(300);
                player.setY(getHeight() - player.getAltura());

                for (int i = 0; i < 1; i++) {
                    Bola b = new Bola();
                    b.setX(150);
                    b.setY(150);
                    int red = r.nextInt(255);
                    int green = r.nextInt(255);
                    int blue = r.nextInt(255);
                    b.setCor(new Color(red, green, blue));
                    lista.add(b);
                }
                
                for (int i = 0; i < 3; i++) {
                    for(int j = 0; j < 4; j++){
                        Bloco c = new Bloco();
                        c.setLargura(75);
                        c.setAltura(10);
                        c.setX(40 + (j*90)); //move horizontal
                        c.setY(50 + (i*20)); // move vertical
                        c.setIncrY(0);
                        c.setIncrX(0);
                        int red = r.nextInt(255);
                        c.setCor(new Color(red));
                        lista.add(c);
                    }
                }
                fimJogo = false;
            }

            if (left) {
                if(player.getX() >= 0){
                    player.setIncrX(-1);
                }
            } else {
                if (right) {
                    if(player.getX() <= 330)
                        player.setIncrX(1);
                } else {
                    player.setIncrX(0);
                }
            }

            
            g.dispose();
            getBufferStrategy().show();
            try {
                Thread.sleep(5);
            } catch (InterruptedException ex) {
            }
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
